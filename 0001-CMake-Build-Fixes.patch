From 1e9e03b9eab1c21c8c720c5482feaac3d65984e8 Mon Sep 17 00:00:00 2001
From: Yclept Nemo <orbisvicis@gmail.com>
Date: Wed, 22 Jan 2014 14:18:36 -0500
Subject: [PATCH] CMake Build Fixes

    * Combine shared/static configuration. Only one instance of
    libflandmark is now built; Use -DBUILD_SHARED_LIBS:BOOL to toggle
    which one. Examples will link against whichever library is built.
    * Enable position-idependent-code in an agnostic fashion; PIC is now
    default for both static (required for linking against shared
    libraries) and shared (required) builds on all supported CMake
    compilers.
    * Add SOVERSION and VERSION information (based on
    flandmark_VERSION_{MAJOR,MINOR}). Symlinks are now created when
    building and the soname is embedded in the object file.
    ***** flandmark_VERSION_MAJOR is now tied to the SOVERSION *****
    * Remove unused COMPILE_DEFINITIONS property: FLANDMARK_STATIC
---
 examples/CMakeLists.txt     |  6 +++---
 libflandmark/CMakeLists.txt | 19 +++++++++----------
 2 files changed, 12 insertions(+), 13 deletions(-)

diff --git a/examples/CMakeLists.txt b/examples/CMakeLists.txt
index 7e93091..89f549c 100644
--- a/examples/CMakeLists.txt
+++ b/examples/CMakeLists.txt
@@ -27,13 +27,13 @@ endif(${OpenCV_VERSION_MINOR} LESS 3)
 
 set(${PROJECT_NAME}_simple_example_srcs simple_example.cpp)
 add_executable(${PROJECT_NAME}_simple_example ${${PROJECT_NAME}_simple_example_srcs})
-target_link_libraries(${PROJECT_NAME}_simple_example flandmark_static ${CV_LIBS_1})
+target_link_libraries(${PROJECT_NAME}_simple_example flandmark ${CV_LIBS_1})
 
 set(${PROJECT_NAME}_example1_srcs example1.cpp)
 add_executable(${PROJECT_NAME}_1 ${${PROJECT_NAME}_example1_srcs})
-target_link_libraries(${PROJECT_NAME}_1 flandmark_static ${CV_LIBS_1} ${CV_LIBS_2})
+target_link_libraries(${PROJECT_NAME}_1 flandmark ${CV_LIBS_1} ${CV_LIBS_2})
 
 set(${PROJECT_NAME}_example2_srcs example2.cpp)
 add_executable(${PROJECT_NAME}_2 ${${PROJECT_NAME}_example2_srcs})
-target_link_libraries(${PROJECT_NAME}_2 flandmark_static ${CV_LIBS_1} ${CV_LIBS_2})
+target_link_libraries(${PROJECT_NAME}_2 flandmark ${CV_LIBS_1} ${CV_LIBS_2})
 
diff --git a/libflandmark/CMakeLists.txt b/libflandmark/CMakeLists.txt
index 8acfefc..e707f26 100644
--- a/libflandmark/CMakeLists.txt
+++ b/libflandmark/CMakeLists.txt
@@ -1,20 +1,19 @@
 find_package( OpenCV REQUIRED )
 include_directories(${OpenCV_INCLUDE_DIRS})
 
-add_library(flandmark_static STATIC flandmark_detector.cpp flandmark_detector.h liblbp.cpp liblbp.h)
-target_link_libraries(flandmark_static ${OpenCV_LIBS})
-if(CMAKE_COMPILER_IS_GNUCC)
-    set_target_properties(flandmark_static PROPERTIES COMPILE_FLAGS -fPIC)
-endif(CMAKE_COMPILER_IS_GNUCC)
-set_property(TARGET flandmark_static PROPERTY COMPILE_DEFINITIONS FLANDMARK_STATIC)
-
-add_library(flandmark_shared SHARED flandmark_detector.cpp flandmark_detector.h liblbp.cpp liblbp.h)
-target_link_libraries(flandmark_shared ${OpenCV_LIBS})
+add_library(flandmark flandmark_detector.cpp flandmark_detector.h liblbp.cpp liblbp.h)
+target_link_libraries(flandmark ${OpenCV_LIBS})
+set_target_properties(flandmark PROPERTIES POSITION_INDEPENDENT_CODE TRUE)
+set_target_properties(flandmark PROPERTIES
+  SOVERSION "${flandmark_VERSION_MAJOR}"
+  VERSION "${flandmark_VERSION_MAJOR}.${flandmark_VERSION_MINOR}"
+)
 
 #setup Config.cmake
 SET(FLANDMARK_BASE_DIR "${PROJECT_SOURCE_DIR}/libflandmark")
 set(FLANDMARK_BINARY_DIR "${PROJECT_BINARY_DIR}/libflandmark")
 configure_file(flandmarkConfig.cmake.in
-  "${PROJECT_BINARY_DIR}/libflandmark/flandmarkConfig.cmake" @ONLY)
+  "${PROJECT_BINARY_DIR}/libflandmark/flandmarkConfig.cmake" @ONLY
+)
 
 export(PACKAGE flandmark)
-- 
1.8.2.2

